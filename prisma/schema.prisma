// Prisma schema docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    HOME_OWNER
    CLEANER
    ADMIN
    PLATFORM_MANAGER
}

enum BookingStatus {
    PENDING // Home owner requested, cleaner hasn't confirmed
    CONFIRMED // Cleaner confirmed
    COMPLETED // Job done
    CANCELLED_BY_OWNER
    CANCELLED_BY_CLEANER
    REJECTED // Cleaner declined the request
}

model User {
    id               String            @id @default(cuid())
    name             String?
    email            String?           @unique
    emailVerified    DateTime?
    image            String?
    role             Role              @default(HOME_OWNER)
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    posts            Post[] // Placeholder model TODO: Remove this
    // Profile relations (optional one-to-one)
    CleanerProfile   CleanerProfile?
    HomeOwnerProfile HomeOwnerProfile?
    // NextAuth
    accounts         Account[]
    sessions         Session[]

    @@index([role])
}

model Post {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// --------------------------------------------------------------------------------------
//                                      Profiles
// --------------------------------------------------------------------------------------
model CleanerProfile {
    id              String    @id @default(cuid())
    userId          String    @unique // One-to-one with User
    user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    bio             String? // @db.Text potentially
    yearsExperience Int?
    hourlyRate      Decimal? // Example pricing field, could be more complex
    servicesOffered Service[]
    // Add other cleaner-specific fields: e.g., travel radius, certifications etc.
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model HomeOwnerProfile {
    id          String   @id @default(cuid())
    userId      String   @unique // One-to-one with User
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    address     String? // Simple address for now
    preferences String? // e.g., pet friendly, specific cleaning products @db.Text
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

// --------------------------------------------------------------------------------------
//                                      Services
// --------------------------------------------------------------------------------------
model Service {
    id               Int             @id @default(autoincrement())
    name             String
    description      String? // @db.Text potentially
    price            Decimal // Price for this specific service
    durationEstimate Int? // Estimated duration in minutes
    isActive         Boolean         @default(true) // Cleaner can toggle service availability
    createdAt        DateTime        @default(now())
    updatedAt        DateTime        @updatedAt
    // Relation to Category
    category         ServiceCategory @relation(fields: [categoryId], references: [id])
    categoryId       Int
    // Relation to Cleaner
    cleaner          CleanerProfile  @relation(fields: [cleanerProfileId], references: [id], onDelete: Cascade) // Service deleted if cleaner deleted
    cleanerProfileId String

    @@index([cleanerProfileId])
    @@index([categoryId])
}

model ServiceCategory {
    id          Int       @id @default(autoincrement())
    name        String    @unique
    description String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    services    Service[] // Relation to services within this category
}

// --------------------------------------------------------------------------------------
//                                      NextAuth Models
// --------------------------------------------------------------------------------------
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
